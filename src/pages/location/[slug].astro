---
import HeaderNav from "@/components/HeaderNav.astro";
import HeaderMeta from "@/components/HeaderMeta.astro";
import { SITE_TITLE, SITE_DESCRIPTION, CDN_URL, ESO_API_URL } from "@/consts";
import Footer from "@/components/Footer.astro";
import ScrollToTop from "@/components/ScrollToTop.astro";
import { md2html } from "@/utils";
import type { MapData, PoiData } from "@/types";

const { slug } = Astro.params;

/** 区域 */
async function getZone(slug: string) {
  const query = new URLSearchParams();
  query.set("pagination[pageSize]", "1");
  query.set("pagination[page]", "1");
  query.set("filters[slug][$eq]", slug!);
  query.set("populate", "*");

  const response = await fetch(`${ESO_API_URL}/api/zones?${query}`);
  const result = await response.json();
  const data = result?.data[0];

  return data;
}

/** 地图 */
async function getMap(id: number): Promise<MapData> {
  const response = await fetch(`${CDN_URL}/maps/${id}.json`);
  return response.json();
}

const data = await getZone(slug!);

if (data == null) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

const name = data.attributes.subZoneName || data.attributes.zoneName;
const nameEn = data.attributes.subZoneNameEn || data.attributes.zoneNameEn;

const { pois, paths } = await getMap(data.attributes.mapId);

const POIs: [string, string, PoiData[]][] = [
  ["洞穴", "Delves", pois.filter((x) => x.type === 4)],
  ["兴趣点", "Points of Interest", pois.filter((x) => x.type === 1)],
  ["探路者", "Striking Locales", pois.filter((x) => x.type === 2)],
  ["套装铸造点", "Set Stations", pois.filter((x) => x.type === 13)],
  ["公开地牢", "Public Dungeons", pois.filter((x) => x.type === 8)],
  ["组队地牢", "Group Dungeons", pois.filter((x) => x.type === 3)],
  ["世界头目", "World Bosses", pois.filter((x) => x.type === 5)],
  ["组队头目", "Group Bosses", pois.filter((x) => x.type === 21)],
  ["房屋", "Player Houses", pois.filter((x) => x.type === 14)],
  ["路点神龛", "Wayshrines", pois.filter((x) => x.type === 10)],
  ["天空碎片", "Skyshards", pois.filter((x) => x.type === 16)],
  // ["书籍", "Books", pois.filter((x) => x.type === 22)],
];

const meta = [
  { name: "名称", content: name },
  { name: "英文", content: nameEn },
  { name: "地区剧情任务", content: "-" },
];

function slugId(en: string) {
  return en.toLowerCase().replaceAll(" ", "-");
}

for (let poi of POIs) {
  meta.push({
    name: poi[0],
    content: `<a href="#${slugId(poi[1])}">${poi[2].length}</a>`,
  });
}
---

<style is:global>
  .markdown-body img.thumb {
    margin: 0 10px;
    width: 16rem;
  }

  .markdown-body img.thumb + p:after {
    content: "";
    display: block;
    clear: both;
  }
</style>

<html lang="zh-CN">
  <head>
    <HeaderMeta
      title={`${name} - 上古卷轴OL地点 - ${SITE_TITLE}`}
      description={SITE_DESCRIPTION}
    />
    <link rel="stylesheet" href={`${CDN_URL}/assets/gfm-fba346.css`} />
  </head>

  <body>
    <HeaderNav />
    <main class="max-w-screen-xl mx-auto grid grid-cols-1 md:grid-cols-4">
      <article class="p-6 md:col-span-3">
        <div class="markdown-body">
          <h1>
            {name}
            <small class="text-gray-500">{nameEn}</small>
          </h1>

          <img
            class="thumb float-left block"
            src={data.attributes.thumb}
            alt={data.attributes.name}
          />

          <Fragment set:html={md2html(data.attributes.description)} />

          {
            paths.length > 0 && (
              <>
                <h2>
                  地点 <small class="text-gray-500">Places</small>
                </h2>
                <ul>
                  {paths.map((x: any) => (
                    <li>
                      <a href={`/map/${x.map_id}`}>
                        <img
                          class="inline-flex"
                          src={`${CDN_URL}/esoui/art/icons/poi/poi_city_complete.png`}
                          width="18"
                          height="18"
                          alt=""
                        />
                        {x.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </>
            )
          }

          {
            POIs.map(
              ([zh, en, pois]) =>
                pois.length > 0 && (
                  <>
                    <h2 id={slugId(en)}>
                      {zh} <small class="text-gray-500">{en}</small>
                    </h2>
                    <ul>
                      {pois.map((x) => (
                        <li>
                          <img
                            class="inline-flex"
                            src={`${CDN_URL}${x.icon}`}
                            width="18"
                            height="18"
                            alt=""
                          />
                          <a href={`/map/${x.map_id}?poi=${x.id}`}>{x.name}</a>
                        </li>
                      ))}
                    </ul>
                  </>
                )
            )
          }

          <Fragment set:html={md2html(data.attributes.content ?? "")} />
        </div>
      </article>
      <aside class="py-6 md:col-span-1">
        <div
          class="rounded border border-gray-300/50 shadow-lg shadow-transparent hover:shadow-gray-100 hover:border-gray-300/80 transition-shadow duration-450 ease-in-out"
        >
          <header
            class="flex p-2 items-center gap-1 border-b border-gray-300/50"
          >
            <svg
              width="16"
              height="16"
              viewBox="0 0 16 16"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M7.99992 1.33334C5.41992 1.33334 3.33325 3.42001 3.33325 6.00001C3.33325 7.58668 4.12659 8.98001 5.33325 9.82668V11.3333C5.33325 11.7 5.63325 12 5.99992 12H9.99992C10.3666 12 10.6666 11.7 10.6666 11.3333V9.82668C11.8733 8.98001 12.6666 7.58668 12.6666 6.00001C12.6666 3.42001 10.5799 1.33334 7.99992 1.33334ZM9.33325 9.05334V10.6667H8.66659V7.60668L9.80659 6.47334C10.0666 6.21334 10.0666 5.78668 9.80659 5.52668C9.54659 5.26668 9.11992 5.26668 8.85992 5.52668L7.99992 6.39334L7.13992 5.52668C6.87992 5.26668 6.45325 5.26668 6.19325 5.52668C5.93325 5.78668 5.93325 6.21334 6.19325 6.47334L7.33325 7.60668V10.6667H6.66659V9.05334C5.48659 8.54001 4.66659 7.36668 4.66659 6.00001C4.66659 4.16001 6.15992 2.66668 7.99992 2.66668C9.83992 2.66668 11.3333 4.16001 11.3333 6.00001C11.3333 7.36668 10.5133 8.54001 9.33325 9.05334ZM5.99992 13.3333H9.99992V14C9.99992 14.3667 9.69992 14.6667 9.33325 14.6667H6.66659C6.29992 14.6667 5.99992 14.3667 5.99992 14V13.3333Z"
                fill="currentColor"
              >
              </path>
            </svg>
            <h3 class="text-base font-medium text-gray-800">区域信息</h3>
          </header>
          <ul class="markdown-body my-2 text-sm text-gray-600">
            {
              meta.map((item) => (
                <li class="flex gap-1 py-1 px-5">
                  <span class="font-bold whitespace-nowrap">{item.name}:</span>
                  <span set:html={item.content || "无"} />
                </li>
              ))
            }
          </ul>
        </div>
      </aside>
    </main>
    <Footer />
    <ScrollToTop />
  </body>
</html>
